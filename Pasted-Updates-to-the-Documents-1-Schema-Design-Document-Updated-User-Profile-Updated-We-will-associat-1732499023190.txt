Updates to the Documents
1. Schema Design Document (Updated)
User Profile (Updated)
We will associate a unique username with each user to facilitate easy transactions without exposing public key addresses.

Field	Type	Description
user_id	String (UID)	Unique identifier for the user
username	String	Unique username chosen by the user
name	String	Full name
email	String	Email address
phone_number	String	Phone number
country	String	Country of residence
preferred_language	String	Language preference
created_at	Timestamp	Account creation date
updated_at	Timestamp	Last update date
Account (Updated)
Each account (wallet) will have an associated public key and private key, but these details will be abstracted away from the user interface.

Field	Type	Description
account_id	String (UID)	Unique identifier for the account
user_id	String	Associated user ID
account_type	Enum	Daily, Family, Emergency, etc.
public_address	String	Blockchain address (hidden from UI)
username	String	User-friendly identifier for transactions
balance	Decimal	Current balance
currency	String	Currency type (e.g., USD, USDC)
created_at	Timestamp	Account creation date
updated_at	Timestamp	Last update date
Contact List
To facilitate easy transactions, users can have a contact list mapping usernames to user IDs.

Field	Type	Description
user_id	String	Owner of the contact list
contacts	Array	List of contacts
- contact_user_id	String	User ID of the contact
- username	String	Username of the contact
- name	String	Display name
- added_at	Timestamp	Date added to contacts
2. Detailed App Flow Document (Updated)
Account Creation Flow (Updated)
Welcome Screen

Options: Sign Up, Log In
Sign Up Flow

Step 1: Enter phone number and email
Step 2: Verify phone number via OTP
Step 3: Choose a unique username
The username will be used for transactions instead of public key addresses
Validate that the username is unique and meets requirements
Step 4: Set up a secure PIN and/or biometric authentication
Step 5: Backup recovery phrase (for self-custody)
Educate users on the importance of the recovery phrase
Provide options to backup securely (e.g., write down, encrypt and store in cloud)
Step 6: Complete profile (name, country, preferred language)
Step 7: Agree to Terms of Service and Privacy Policy
Completion: Redirect to the Dashboard
Account Types

After initial setup, users can create additional accounts (wallets) of different types (e.g., Emergency Fund, Zakat Savings)
Each account will have its own public/private key pair, but this is abstracted away
Sending Money Flow (Updated)
Initiate Transfer

Step 1: Select account to send from
Step 2: Enter recipient details:
Option 1: Enter recipient's username
Option 2: Select from contacts
Option 3: Scan recipient's QR code (which encodes their username)
Step 3: Enter amount and currency
Step 4: Add optional note
Review Transfer

Show transaction details
Confirm recipient by displaying their username and profile picture (if available)
Display any fees (if applicable)
Authenticate

Confirm via PIN or biometric
For amounts above a threshold, require additional authentication
Completion

Display confirmation screen
Option to share receipt
Receiving Money Flow (Updated)
Request Money

Option 1: Send a request to another user's username
Option 2: Share your username or QR code with the sender
Option 3: Generate a payment link that can be shared via messaging apps
Direct Receive

No action needed; users can receive funds sent to their username at any time
Abstracting Blockchain Addresses
Username Resolution Service:

Implement a service that maps usernames to public addresses securely.
When a user initiates a transaction using a username, the app resolves the username to the corresponding public key address in the backend without exposing it to the user.
QR Codes:

QR codes contain the user's username instead of the public key address.
Scanning a QR code automatically fills in the recipient's username in the send money flow.
Wallet Dashboard Interface (Updated)
Account Overview:

Display accounts with friendly names and balances.
Provide options to create new accounts of different types.
Account Details:

Show transaction history with contacts' usernames and profile pictures.
Include options for common actions (e.g., Send, Receive, Request).
Key Management (Abstracted):

Private keys are stored securely on the device using secure enclave or keychain services.
Users are prompted to back up their recovery phrase during account creation.
Provide an option in settings to view or re-backup the recovery phrase (with proper security warnings and authentication).
3. Technical Implementation Details
Username to Public Key Mapping
Database Storage:

Store the mapping of usernames to user IDs and associated public addresses in a secure database.
Ensure that this mapping is protected against unauthorized access.
Security Measures:

Implement access controls and encryption for data at rest and in transit.
Use hashed and salted representations of sensitive data where applicable.
Resolving Usernames during Transactions
Backend Service:

Create an API endpoint that, given a username, returns the associated public address.
Authenticate requests to prevent abuse (e.g., rate limiting, authentication tokens).
On the Client Side:

When a user enters a recipient's username, the app calls the API to get the public address.
Use this public address to create and sign the transaction locally.
Broadcast the signed transaction to the Avalanche network.
Abstracting Transaction Details
Transaction Signing:

All transaction signing happens on the client device.
The user interface presents simple actions like "Send" and "Receive" without showing transaction hashes or gas fees (unless advanced details are requested).
Handling Fees:

By default, transaction fees can be handled by the application (e.g., minimal fees covered by the platform) or included transparently in the transaction without confusing the user.
If necessary, provide a simplified explanation of fees in familiar terms.
4. Updated Tech Stack and Packages
Username Resolution and Security
Backend Services:

Implement secure APIs using HTTPS with SSL/TLS encryption.
Use authentication tokens (e.g., JWT) to secure API endpoints.
Databases:

Use a secure database service (e.g., AWS RDS with encryption at rest) to store user profiles and mappings.
Implement regular security audits and compliance checks.
Client-Side Storage and Security
Secure Key Storage:

Utilize secure storage options like the Secure Enclave on iOS and Android's Keystore.
Use libraries such as react-native-keychain for secure credential storage.
Encryption Libraries:

Use well-vetted cryptographic libraries for any client-side encryption.
Ensure that private keys and recovery phrases are never transmitted to the backend.
5. User Experience Enhancements
Contact Management
Adding Contacts:

Users can add other users to their contact list by searching for their username or scanning a QR code.
Contacts are displayed with usernames and optional profile pictures.
Privacy Settings:

Users can choose to make their profile discoverable or private.
Options to block or report users to maintain a safe community.
Transaction History
Simplified View:

Show transactions with contacts' usernames and avatars.
Use familiar terms like "Sent to" or "Received from" instead of blockchain terminology.
Detailed View (Optional):

For advanced users, provide an option to view transaction details like transaction hashes, timestamps, and amounts on the blockchain explorer.
Error Handling
Username Not Found:

If a user enters an incorrect or non-existent username, display a friendly error message.
Suggest checking the spelling or inviting the person to join the platform.
Transaction Failures:

If a transaction fails due to network issues or insufficient funds, provide clear instructions on how to resolve the issue.
6. Security Considerations
Preventing Username Squatting
Unique Username Policy:

Implement policies to prevent impersonation and ensure that usernames are unique and appropriate.
Verification Badges:

For high-profile users or businesses, offer verification badges to confirm their identity.
Protecting User Data
Data Minimization:

Collect only the necessary user data required for the service.
Avoid storing sensitive information that isn't needed.
Regular Audits:

Conduct regular security audits and penetration testing.
Stay updated with the latest security best practices.
